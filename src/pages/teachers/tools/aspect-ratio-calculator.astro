---
import DefaultLayout from '../../../layouts/DefaultLayout.astro'
---

<DefaultLayout title="Aspect Ratio Calculator">
  <div class="container">
    <h1>Aspect Ratio Calculator</h1>

    <div class="calculator-layout mt-32">
      <p>
        Provide a desired width OR height in one of the boxes below. The calculator will then show the dimensions (<span
          class="font-bold">w X h</span
        >) for various aspect ratios.
      </p>
      <div class="input-section mt-10">
        <div class="input-group">
          <label for="width16">Target width</label>
          <input id="width16" name="width16" type="number" oninput="calculate('width16')" />
        </div>
        <span class="or">or</span>
        <div class="input-group">
          <label for="height16">Target height</label>
          <input id="height16" name="height16" type="number" oninput="calculate('height16')" />
        </div>
      </div>

      <div class="output-section mt-16">
        <div class="output-group">
          <span class="aspect-ratio-label">16:9</span>
          <div id="result16_9" class="result-box"></div>
        </div>
        <div class="output-group">
          <span class="aspect-ratio-label">4:3</span>
          <div id="result4_3" class="result-box"></div>
        </div>
        <!-- <div class="output-group">
          <span class="aspect-ratio-label">2:1</span>
          <div id="result2_1" class="result-box"></div>
        </div> -->
      </div>
    </div>
  </div>
</DefaultLayout>

<script>
  document.addEventListener('astro:page-load', () => {
    function calculate(inputId) {
      const isWidth = inputId.includes('width')
      const widthInput = document.getElementById('width16')
      const heightInput = document.getElementById('height16')
      const result16_9Element = document.getElementById('result16_9')
      const result4_3Element = document.getElementById('result4_3')
      const result2_1Element = document.getElementById('result2_1')

      let inputValue

      if (isWidth && widthInput.value) {
        inputValue = parseFloat(widthInput.value)
        heightInput.value = ''
      } else if (!isWidth && heightInput.value) {
        inputValue = parseFloat(heightInput.value)
        widthInput.value = ''
      } else {
        result16_9Element.textContent = 'Enter a width or height'
        result4_3Element.textContent = 'Enter a width or height'
        result2_1Element.textContent = 'Enter a width or height'
        return
      }

      // Calculate 16:9
      let width16_9, height16_9
      if (isWidth) {
        width16_9 = inputValue
        height16_9 = Math.round(width16_9 / (16 / 9))
      } else {
        height16_9 = inputValue
        width16_9 = Math.round(height16_9 * (16 / 9))
      }
      result16_9Element.textContent = `${width16_9} x ${height16_9}`

      // Calculate 4:3
      let width4_3, height4_3
      if (isWidth) {
        width4_3 = inputValue
        height4_3 = Math.round(width4_3 / (4 / 3))
      } else {
        height4_3 = inputValue
        width4_3 = Math.round(height4_3 * (4 / 3))
      }
      result4_3Element.textContent = `${width4_3} x ${height4_3}`

      // Calculate 2:1 (dual monitor)
      let width2_1, height2_1
      if (isWidth) {
        width2_1 = inputValue
        height2_1 = Math.round(width2_1 / 2)
      } else {
        height2_1 = inputValue
        width2_1 = Math.round(height2_1 * (32 / 9))
      }
      result2_1Element.textContent = `${width2_1} x ${height2_1}`
    }

    window.calculate = calculate
  })
</script>

<style>
  :root {
    --inputarea-bg: #ffffff;
    --inputarea-text: #333333;
  }

  [data-theme='dark'] {
    --inputarea-bg: #4a5568;
    --inputarea-text: #ffffff;
  }

  #width16,
  #height16 {
    color: var(--inputarea-text);
  }

  .container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
  }

  .calculator-layout {
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .input-section {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    width: auto;
  }

  .or {
    align-self: center;
    font-weight: bold;
  }

  label {
    font-weight: bold;
    margin-bottom: 5px;
  }

  input {
    width: 6rem;
    padding: 5px;
    border: 1px solid #000;
  }

  .output-section {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  .output-row {
    display: flex;
    justify-content: space-between;
    gap: 20px;
  }

  .output-group {
    display: flex;
    align-items: center;
    font-weight: bold;
    gap: 10px;
    flex: 1;
  }

  .aspect-ratio-label {
    width: 3rem;
  }

  .result-box {
    flex-grow: 1;
    padding: 5px 10px;
    border: 1px solid var(--inputarea-text);
    min-height: 30px;
    color: var(--primary-200);
  }
</style>

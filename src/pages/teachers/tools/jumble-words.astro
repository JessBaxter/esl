---
import DefaultLayout from '../../../layouts/DefaultLayout.astro'
---

<DefaultLayout title="Jumble Words">
  <style>
    :root {
      --textarea-bg: #ffffff;
      --textarea-text: #333333;
    }

    [data-theme='dark'] {
      --textarea-bg: #4a5568;
      --textarea-text: #ffffff;
    }

    .custom-textarea {
      background-color: var(--textarea-bg);
      color: var(--textarea-text);
      border: 1px solid grey;
      height: 150px;
      overflow-y: scroll;
      white-space: pre-wrap;
      word-wrap: break-word;
      resize: none;
    }

    .result-container {
      position: relative;
      height: 150px;
    }

    #result {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      overflow-y: scroll;
      white-space: pre-wrap;
      word-wrap: break-word;
    }
  </style>

  <section class="my-12">
    <div class="space-content container">
      <h1>Jumble Words</h1>
    </div>
  </section>
  <section class="mb-12 mt-32">
    <div class="container">
      <div class="grid grid-cols-1 gap-8 md:grid-cols-2">
        <div class="rounded-lg">
          <h2 class="mb-4 text-xl font-semibold">Original sentence(s)</h2>
          <textarea
            id="sentence"
            class="custom-textarea mb-4 mt-2 w-full rounded border p-2"
            placeholder="Enter your sentences here, one per line..."></textarea>

          <div class="mt-2 flex items-center gap-4">
            <button id="shuffle-button" class="button">Jumble</button>
            <button id="clear-input" class="button color-secondary">Clear</button>
            <p id="jumble-message" class="hidden italic">&nbsp;Sentences jumbled!</p>
          </div>
        </div>

        <div class="rounded-lg">
          <h2 class="md: my-0 my-4 text-xl font-semibold lg:my-0">Jumbled sentence(s)</h2>
          <div class="result-container custom-textarea mt-6 rounded border">
            <div id="result" class="p-2"></div>
          </div>
          <div class="mt-2 flex flex-col gap-2">
            <label class="flex items-center">
              <input type="checkbox" id="jumbleMaintainPunctuation" />
              &nbsp;Remove punctuation
            </label>
            <label class="flex items-center">
              <input type="checkbox" id="jumbleRemoveCapitalisation" />
              &nbsp;Remove capitalisation
            </label>
            <label class="flex items-center">
              <input type="checkbox" id="numberSentences" />
              &nbsp;Number each sentence
            </label>
          </div>
          <div class="mt-6 flex items-center gap-4">
            <button id="copy-button" class="button">Copy</button>
            <button id="clear-result" class="button color-secondary">Clear</button>
            <p id="copy-message" class="hidden italic">&nbsp;Copied to clipboard!</p>
          </div>
        </div>
      </div>
    </div>
  </section>
</DefaultLayout>

<script type="module">
  document.addEventListener('astro:page-load', () => {
    const shuffleButton = document.getElementById('shuffle-button')
    const copyButton = document.getElementById('copy-button')
    const clearInputButton = document.getElementById('clear-input')
    const clearResultButton = document.getElementById('clear-result')
    const jumbleMessageElement = document.getElementById('jumble-message')
    const copyMessageElement = document.getElementById('copy-message')
    const resultElement = document.getElementById('result')
    const sentenceInput = document.getElementById('sentence')
    const numberSentencesCheckbox = document.getElementById('numberSentences')
    const removePunctuationCheckbox = document.getElementById('jumbleMaintainPunctuation')
    const removeCapitalisationCheckbox = document.getElementById('jumbleRemoveCapitalisation')

    let currentJumbledSentences = []

    shuffleButton.addEventListener('click', () => {
      shuffleWords()
      jumbleMessageElement.classList.remove('hidden')
      setTimeout(() => {
        jumbleMessageElement.classList.add('hidden')
      }, 3000)
    })

    copyButton.addEventListener('click', function () {
      const text = resultElement.innerText
      if (text) {
        navigator.clipboard
          .writeText(text)
          .then(() => {
            copyMessageElement.classList.remove('hidden')
            setTimeout(() => {
              copyMessageElement.classList.add('hidden')
            }, 3000)
          })
          .catch((err) => {
            console.error('Error in copying text: ', err)
          })
      }
    })

    clearInputButton.addEventListener('click', function () {
      sentenceInput.value = ''
      resultElement.innerText = ''
      currentJumbledSentences = []
      updateCopyButtonState()
    })

    clearResultButton.addEventListener('click', function () {
      resultElement.innerText = ''
      currentJumbledSentences = []
      updateCopyButtonState()
    })

    // Add event listeners for checkboxes
    removePunctuationCheckbox.addEventListener('change', updateOutput)
    removeCapitalisationCheckbox.addEventListener('change', updateOutput)
    numberSentencesCheckbox.addEventListener('change', updateOutput)

    function updateCopyButtonState() {
      copyButton.disabled = !resultElement.innerText.trim()
    }

    function shuffleWords() {
      const text = sentenceInput.value
      const sentences = text.split(/\n/).filter((line) => line.trim().length > 0)

      currentJumbledSentences = sentences.map((sentence) => {
        let words = sentence.split(' ')
        return shuffleArray(words).join(' ')
      })

      updateOutput()
    }

    function updateOutput() {
      const removePunctuation = removePunctuationCheckbox.checked
      const removeCapitalisation = removeCapitalisationCheckbox.checked
      const numberSentences = numberSentencesCheckbox.checked

      const processedSentences = currentJumbledSentences.map((sentence, index) => {
        let processedSentence = sentence

        if (removePunctuation) {
          processedSentence = processedSentence.replace(/[.,\/#!$%\^&\*;:{}=\-_`~()?]/g, '')
        }

        if (removeCapitalisation) {
          processedSentence = processedSentence.toLowerCase()
        }

        if (numberSentences) {
          return `${index + 1}. ${processedSentence}`
        } else {
          return processedSentence
        }
      })

      resultElement.innerText = processedSentences.join('\n')
      updateCopyButtonState()
    }

    // Utility function to shuffle array elements
    function shuffleArray(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1))
        ;[array[i], array[j]] = [array[j], array[i]] // Swap elements
      }
      return array
    }
  })
</script>
